#include <stdio.h>    // Biblioteca para entrada e sa√≠da (ex: printf, scanf)
#include <stdlib.h>   // Biblioteca para fun√ß√µes como rand() e srand()
#include <time.h>     // Biblioteca para usar o tempo atual (para n√∫meros aleat√≥rios)
#include <string.h>   // Biblioteca para trabalhar com textos (strings)

// Definimos quantas cidades e atributos o jogo tem
#define TOTAL_CIDADES 8
#define TOTAL_ATRIBUTOS 5

// Estrutura que define os dados de uma cidade
typedef struct {
    char nome[30];
    char estado[30];
    int populacao;       // Popula√ß√£o em mil habitantes
    float area;          // √Årea em km¬≤
    float pib;           // PIB per capita em mil reais
    int pontosTuristicos;
    float densidade;     // Densidade = popula√ß√£o / √°rea
} Cidade;

// Mostra os atributos dispon√≠veis para o jogador escolher
void mostrarAtributosDisponiveis(int excluido) {
    for (int i = 1; i <= TOTAL_ATRIBUTOS; i++) {
        if (i == excluido) continue;
        switch (i) {
            case 1: printf("1 - Popula√ß√£o\n"); break;
            case 2: printf("2 - √Årea (em km¬≤)\n"); break;
            case 3: printf("3 - PIB per capita (em mil reais)\n"); break;
            case 4: printf("4 - Pontos Tur√≠sticos\n"); break;
            case 5: printf("5 - Densidade Demogr√°fica (hab/km¬≤)\n"); break;
        }
    }
}

int main() {
    // Lista das 8 cidades usadas no jogo
    Cidade cidades[TOTAL_CIDADES] = {
        {"S√£o Paulo", "S√£o Paulo", 11451, 1521, 3.5, 10, 0},
        {"Rio de Janeiro", "Rio de Janeiro", 6211, 1255, 950, 10, 0},
        {"Salvador", "Bahia", 13184, 693, 400, 10, 0},
        {"Porto Alegre", "Rio Grande do Sul", 1332, 497, 520, 10, 0},
        {"Curitiba", "Paran√°", 1961, 434, 430, 9, 0},
        {"Recife", "Pernambuco", 1660, 218, 390, 8, 0},
        {"Fortaleza", "Cear√°", 2682, 314, 350, 7, 0},
        {"Belo Horizonte", "Minas Gerais", 2520, 331, 420, 8, 0}
    };

    // Calcula a densidade populacional de cada cidade
    for (int i = 0; i < TOTAL_CIDADES; i++) {
        cidades[i].densidade = cidades[i].populacao / cidades[i].area;
    }

    // Inicializa gerador de n√∫meros aleat√≥rios
    srand(time(NULL));

    int escolhaJogador, escolhaComputador;

    printf("üéÆ Bem-vindo ao Super Trunfo de Cidades!\n\n");

    // Mostra todas as cartas dispon√≠veis para o jogador
    printf("Escolha a sua carta entre as cidades abaixo:\n\n");
    for (int i = 0; i < TOTAL_CIDADES; i++) {
        printf("%d - %s (%s)\n", i + 1, cidades[i].nome, cidades[i].estado);
    }

    // Pergunta clara para o jogador
    printf("\n‚û°Ô∏è Digite o n√∫mero da cidade que voc√™ quer jogar (1 a %d): ", TOTAL_CIDADES);
    scanf("%d", &escolhaJogador);
    escolhaJogador--;

    // Verifica se a escolha √© v√°lida
    if (escolhaJogador < 0 || escolhaJogador >= TOTAL_CIDADES) {
        printf("‚ùå Op√ß√£o inv√°lida.\n");
        return 1;
    }

    // Computador escolhe uma carta aleat√≥ria diferente
    escolhaComputador = rand() % TOTAL_CIDADES;
    while (escolhaComputador == escolhaJogador) {
        escolhaComputador = rand() % TOTAL_CIDADES;
    }

    int atributo1, atributo2;

    // Jogador escolhe o primeiro atributo para comparar
    printf("\nEscolha o primeiro atributo para comparar:\n");
    mostrarAtributosDisponiveis(-1);
    printf("Digite o n√∫mero do atributo: ");
    scanf("%d", &atributo1);

    if (atributo1 < 1 || atributo1 > TOTAL_ATRIBUTOS) {
        printf("‚ùå Atributo inv√°lido!\n");
        return 1;
    }

    // Jogador escolhe o segundo atributo
    printf("\nAgora escolha o segundo atributo (diferente do primeiro):\n");
    mostrarAtributosDisponiveis(atributo1);
    printf("Digite o n√∫mero do segundo atributo: ");
    scanf("%d", &atributo2);

    if (atributo2 < 1 || atributo2 > TOTAL_ATRIBUTOS || atributo2 == atributo1) {
        printf("‚ùå Atributo inv√°lido!\n");
        return 1;
    }

    // Cidades escolhidas
    Cidade cJogador = cidades[escolhaJogador];
    Cidade cComp = cidades[escolhaComputador];

    printf("\nüÉè Sua carta: %s (%s)\n", cJogador.nome, cJogador.estado);
    printf("ü§ñ Carta do Computador: %s (%s)\n\n", cComp.nome, cComp.estado);

    // Vetores com os valores dos atributos
    float valoresJogador[6] = {0, cJogador.populacao, cJogador.area, cJogador.pib, cJogador.pontosTuristicos, cJogador.densidade};
    float valoresComp[6] =    {0, cComp.populacao, cComp.area, cComp.pib, cComp.pontosTuristicos, cComp.densidade};

    int pontosJogador = 0, pontosComputador = 0;

    // Compara primeiro atributo
    printf("üîç Comparando Atributo 1:\n");
    printf("Voc√™: %.2f | Computador: %.2f\n", valoresJogador[atributo1], valoresComp[atributo1]);
    if (atributo1 == 5) { // Menor vence
        valoresJogador[atributo1] < valoresComp[atributo1] ? pontosJogador++ : pontosComputador++;
    } else {
        valoresJogador[atributo1] > valoresComp[atributo1] ? pontosJogador++ : pontosComputador++;
    }

    // Compara segundo atributo
    printf("\nüîç Comparando Atributo 2:\n");
    printf("Voc√™: %.2f | Computador: %.2f\n", valoresJogador[atributo2], valoresComp[atributo2]);
    if (atributo2 == 5) { // Menor vence
        valoresJogador[atributo2] < valoresComp[atributo2] ? pontosJogador++ : pontosComputador++;
    } else {
        valoresJogador[atributo2] > valoresComp[atributo2] ? pontosJogador++ : pontosComputador++;
    }

    // Soma dos dois atributos para exibir no final
    float somaJogador = valoresJogador[atributo1] + valoresJogador[atributo2];
    float somaComputador = valoresComp[atributo1] + valoresComp[atributo2];

    printf("\nüìä Soma dos dois atributos:\nVoc√™: %.2f | Computador: %.2f\n", somaJogador, somaComputador);

    // Mostra o vencedor
    if (somaJogador == somaComputador) {
        printf("\n‚öñÔ∏è Resultado: Empate!\n");
    } else if (somaJogador > somaComputador) {
        printf("\nüèÜ Resultado: Parab√©ns! Voc√™ venceu!\n");
    } else {
        printf("\nüí• Resultado: Voc√™ perdeu. Tente novamente!\n");
    }

    return 0;
}
