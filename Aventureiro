#include <stdio.h>    // Biblioteca para entrada e sa√≠da (ex: printf, scanf)
#include <stdlib.h>   // Biblioteca para fun√ß√µes como rand() e srand()
#include <time.h>     // Biblioteca para usar o tempo atual (para n√∫meros aleat√≥rios)
#include <string.h>   // Biblioteca para trabalhar com textos (strings)

// Definimos quantas cidades e atributos o jogo tem
#define TOTAL_CIDADES 8
#define TOTAL_ATRIBUTOS 5

// Estrutura que define os dados de uma cidade
typedef struct {
    char nome[30];
    char estado[30];
    int populacao;       // Popula√ß√£o em mil habitantes
    float area;          // √Årea em km¬≤
    float pib;           // PIB per capita em mil reais
    int pontosTuristicos;
    float densidade;     // Densidade = popula√ß√£o / √°rea
} Cidade;

// Mostra os atributos dispon√≠veis para o jogador escolher
void mostrarAtributosDisponiveis() {
    printf("1 - Popula√ß√£o\n");
    printf("2 - √Årea (em km¬≤)\n");
    printf("3 - PIB per capita (em mil reais)\n");
    printf("4 - Pontos Tur√≠sticos\n");
    printf("5 - Densidade Demogr√°fica (hab/km¬≤)\n");
}

int main() {
    // Lista das 8 cidades usadas no jogo
    Cidade cidades[TOTAL_CIDADES] = {
        {"S√£o Paulo", "S√£o Paulo", 11451, 1521, 3.5, 10, 0},
        {"Rio de Janeiro", "Rio de Janeiro", 6211, 1255, 950, 10, 0},
        {"Salvador", "Bahia", 13184, 693, 400, 10, 0},
        {"Porto Alegre", "Rio Grande do Sul", 1332, 497, 520, 10, 0},
        {"Curitiba", "Paran√°", 1961, 434, 430, 9, 0},
        {"Recife", "Pernambuco", 1660, 218, 390, 8, 0},
        {"Fortaleza", "Cear√°", 2682, 314, 350, 7, 0},
        {"Belo Horizonte", "Minas Gerais", 2520, 331, 420, 8, 0}
    };

    // Calcula a densidade populacional de cada cidade
    for (int i = 0; i < TOTAL_CIDADES; i++) {
        cidades[i].densidade = (float)cidades[i].populacao / cidades[i].area;
    }

    // Inicializa gerador de n√∫meros aleat√≥rios
    srand(time(NULL));

    int escolhaJogador, escolhaComputador;

    printf("üéÆ Bem-vindo ao Super Trunfo de Cidades!\n\n");

    // Mostra todas as cartas dispon√≠veis para o jogador
    printf("Escolha a sua carta entre as cidades abaixo:\n\n");
    for (int i = 0; i < TOTAL_CIDADES; i++) {
        printf("%d - %s (%s)\n", i + 1, cidades[i].nome, cidades[i].estado);
    }

    // Pergunta clara para o jogador
    printf("\n‚û°Ô∏è Digite o n√∫mero da cidade que voc√™ quer jogar (1 a %d): ", TOTAL_CIDADES);
    scanf("%d", &escolhaJogador);
    escolhaJogador--;

    // Verifica se a escolha √© v√°lida
    if (escolhaJogador < 0 || escolhaJogador >= TOTAL_CIDADES) {
        printf("‚ùå Op√ß√£o inv√°lida.\n");
        return 1;
    }

    // Computador escolhe uma carta aleat√≥ria diferente
    escolhaComputador = rand() % TOTAL_CIDADES;
    while (escolhaComputador == escolhaJogador) {
        escolhaComputador = rand() % TOTAL_CIDADES;
    }

    Cidade cJogador = cidades[escolhaJogador];
    Cidade cComp = cidades[escolhaComputador];

    printf("\nüÉè Sua carta: %s (%s)\n", cJogador.nome, cJogador.estado);
    printf("ü§ñ Carta do Computador: %s (%s)\n\n", cComp.nome, cComp.estado);

    int atributoEscolhido;
    float valorJogador, valorComputador;
    char nomeAtributo[30];

    // Menu interativo para o jogador escolher o atributo para compara√ß√£o
    printf("Escolha o atributo para comparar:\n");
    mostrarAtributosDisponiveis();
    printf("Digite o n√∫mero do atributo: ");
    scanf("%d", &atributoEscolhido);

    if (atributoEscolhido < 1 || atributoEscolhido > TOTAL_ATRIBUTOS) {
        printf("‚ùå Atributo inv√°lido!\n");
        return 1;
    }

    // Define os valores e nome do atributo para exibi√ß√£o
    switch (atributoEscolhido) {
        case 1:
            valorJogador = (float)cJogador.populacao;
            valorComputador = (float)cComp.populacao;
            strcpy(nomeAtributo, "Popula√ß√£o");
            break;
        case 2:
            valorJogador = cJogador.area;
            valorComputador = cComp.area;
            strcpy(nomeAtributo, "√Årea");
            break;
        case 3:
            valorJogador = cJogador.pib;
            valorComputador = cComp.pib;
            strcpy(nomeAtributo, "PIB per capita");
            break;
        case 4:
            valorJogador = (float)cJogador.pontosTuristicos;
            valorComputador = (float)cComp.pontosTuristicos;
            strcpy(nomeAtributo, "Pontos Tur√≠sticos");
            break;
        case 5:
            valorJogador = cJogador.densidade;
            valorComputador = cComp.densidade;
            strcpy(nomeAtributo, "Densidade Demogr√°fica");
            break;
        default:
            printf("‚ùå Op√ß√£o inv√°lida!\n");
            return 1;
    }

    // Mostra valores para compara√ß√£o
    printf("\nComparando atributo: %s\n", nomeAtributo);
    printf("%s: %.2f\n", cJogador.nome, valorJogador);
    printf("%s: %.2f\n\n", cComp.nome, valorComputador);

    // L√≥gica de compara√ß√£o com if-else aninhados
    if (atributoEscolhido == 5) {  // Densidade demogr√°fica: menor valor vence
        if (valorJogador < valorComputador) {
            printf("üèÜ Resultado: Voc√™ venceu!\n");
        } else if (valorJogador > valorComputador) {
            printf("üí• Resultado: Voc√™ perdeu.\n");
        } else {
            printf("‚öñÔ∏è Resultado: Empate!\n");
        }
    } else {  // Para os demais atributos: maior valor vence
        if (valorJogador > valorComputador) {
            printf("üèÜ Resultado: Voc√™ venceu!\n");
        } else if (valorJogador < valorComputador) {
            printf("üí• Resultado: Voc√™ perdeu.\n");
        } else {
            printf("‚öñÔ∏è Resultado: Empate!\n");
        }
    }

    return 0;
}
